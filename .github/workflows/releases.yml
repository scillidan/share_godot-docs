name: Create Releases
on:
  workflow_dispatch:
  # Optional schedule:
  schedule:
    - cron: '0 1 * * 1'

env:
  stable_version: '4.5'
  upstream_owner: 'godotengine'
  upstream_repo: 'godot-docs'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
    - name: Checkout self repo
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y unzip tar python3-pip
        python3 -m pip install --upgrade pip
        python3 -m pip install doc2dash requests jq

    - name: Get workflow ID of build_offline_docs.yml
      id: workflow_id
      run: |
        echo "Looking up workflow ID for build_offline_docs.yml"
        wf_json=$(curl -s "https://api.github.com/repos/${{ env.upstream_owner }}/${{ env.upstream_repo }}/actions/workflows")
        id=$(echo "$wf_json" | jq -r '.workflows[] | select(.path == ".github/workflows/build_offline_docs.yml") | .id')
        if [ -z "$id" ] || [ "$id" == "null" ]; then
          echo "Workflow build_offline_docs.yml not found"
          exit 1
        fi
        echo "workflow_id=$id" >> $GITHUB_OUTPUT

    - name: Get latest successful upstream run for build_offline_docs.yml
      id: upstream_run
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Use workflow_id from previous step
        workflow_id=${{ steps.workflow_id.outputs.workflow_id }}
        owner=${{ env.upstream_owner }}
        repo=${{ env.upstream_repo }}
        echo "Fetching latest successful workflow runs for workflow ID $workflow_id..."
        runs_json=$(curl -s "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs?status=success&per_page=1")
        run_id=$(echo "$runs_json" | jq -r '.workflow_runs[0].id')
        run_html_url=$(echo "$runs_json" | jq -r '.workflow_runs[0].html_url')
        run_created_at=$(echo "$runs_json" | jq -r '.workflow_runs[0].created_at')
        if [[ "$run_id" == "null" ]] || [[ -z "$run_id" ]]; then
          echo "No successful upstream run found"
          exit 1
        fi
        echo "Upstream run id: $run_id"
        echo "Upstream run url: $run_html_url"
        echo "Run created at: $run_created_at"
        # Convert to yyyymmdd date
        run_date=$(date -d "$run_created_at" +%Y%m%d)
        echo "run_date=$run_date" >> $GITHUB_OUTPUT
        echo "run_id=$run_id" >> $GITHUB_OUTPUT
        echo "run_html_url=$run_html_url" >> $GITHUB_OUTPUT

        echo "run_id=${{ steps.upstream_run.outputs.run_id }}"
        echo "owner=${{ env.upstream_owner }}"
        echo "repo=${{ env.upstream_repo }}"
        echo "GITHUB_TOKEN is set: ${GITHUB_TOKEN:+yes}"
        
        artifacts_json=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/$owner/$repo/actions/runs/$run_id/artifacts")
        echo "List artifacts response:"
        echo "$artifacts_json" | jq .
        
        artifact_ids=$(echo "$artifacts_json" | jq -r '.artifacts[] | select(.name | test("^godot-docs-html-")) | .id')
        echo "Found artifact IDs: $artifact_ids"
        
        if [[ -z "$artifact_ids" ]]; then
          echo "No matching artifacts found"
          exit 1
        fi
    
    - name: Download godot-docs-html-*.zip artifacts from upstream run
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        run_id=${{ steps.upstream_run.outputs.run_id }}
        owner=${{ env.upstream_owner }}
        repo=${{ env.upstream_repo }}
        
        echo "Listing artifacts for upstream run $run_id"
        artifacts_json=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/$owner/$repo/actions/runs/$run_id/artifacts")
        
        artifact_ids=$(echo "$artifacts_json" | jq -r '.artifacts[] | select(.name | test("^godot-docs-html-")) | .id')
        
        echo "Found artifact IDs: $artifact_ids"
        if [[ -z "$artifact_ids" ]]; then
          echo "No matching artifacts found"
          exit 1
        fi
        
        mkdir -p artifacts
        cd artifacts
        
        # Get artifact info JSON
        artifacts_json=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/$owner/$repo/actions/runs/$run_id/artifacts")
        
        # Extract name and id pairs for matching artifacts
        mapfile -t artifact_lines < <(echo "$artifacts_json" | jq -c '.artifacts[] | select(.name | test("^godot-docs-html-")) | {id: .id, name: .name}')
        
        for artifact_json in "${artifact_lines[@]}"; do
          artifact_id=$(echo "$artifact_json" | jq -r '.id')
          artifact_name=$(echo "$artifact_json" | jq -r '.name')
        
          echo "Downloading artifact $artifact_name with ID $artifact_id"
          curl -L -H "Authorization: Bearer $GITHUB_TOKEN" \
               -o artifact.zip \
               "https://api.github.com/repos/$owner/$repo/actions/artifacts/$artifact_id/zip"
          
          # Extract into folder named exactly as artifact_name
          mkdir -p "$artifact_name"
          unzip -q artifact.zip -d "$artifact_name"
          rm artifact.zip
        
          echo "Listing contents of $artifact_name:"
          ls -lR "$artifact_name"
        done
        
        cd ..
        
        for folder in artifacts/godot-docs-html-*; do
          base_folder=$(basename "$folder")
          echo "Copying $folder to workspace root as $base_folder"
          cp -r "$folder" "$base_folder"
        done

    - name: Rename stable folder to version folder
      run: |
        if [ -d "godot-docs-html-stable" ]; then
          mv godot-docs-html-stable godot-docs-html-${{ env.stable_version }}
          echo "Renamed godot-docs-html-stable to godot-docs-html-${{ env.stable_version }}"
        else
          echo "Folder godot-docs-html-stable not found, skipping rename"
        fi

    - name: Prepare docsets with doc2dash and icons
      run: |
        for branch in master ${{ env.stable_version }} 3.6; do
          name_branch=$(echo "$branch" | tr '.' '_')
          folder="godot-docs-html-$branch"
          if [ ! -d "$folder" ]; then
            echo "Folder $folder not found, skipping"
            continue
          fi
          doc2dash --icon icon.png --icon-2x icon@2x.png --name "godot-$name_branch" -f "$folder"
        done
        for branch in ${{ env.stable_version }} 3.6; do
          name_branch=$(echo "$branch" | tr '.' '_')
          mv godot-$name_branch.docset godot-$branch.docset
        done

    - name: Replace content in Info.plist files
      run: |
        for branch in master ${{ env.stable_version }} 3.6; do
          name_branch=$(echo "$branch" | tr '.' '_')
          plist_path="godot-$branch.docset/Contents/Info.plist"
          perl -0777 -i -pe '
            s{(<key>CFBundleIdentifier</key>\s*<string>)godot-'$name_branch'(</string>)}{$1godot$2}g;
            s{(<key>CFBundleName</key>\s*<string>)godot-'$name_branch'(</string>)}{$1Godot '"$branch"'$2}g;
            s{<key>DocSetPlatformFamily</key>\n.*\n}{}g;
          ' "$plist_path"
        done

    - name: Create tgz archive of docsets
      run: |
        for branch in master ${{ env.stable_version }} 3.6; do
          docset_folder="godot-$branch.docset"
          tgz_name="Godot-docset-$branch.tgz"
          if [ -d "$docset_folder" ]; then
            tar --exclude='.DS_Store' -czf "$tgz_name" "$docset_folder"
            echo "Created $tgz_name"
          else
            echo "Docset folder $docset_folder not found, skipping tar"
          fi
        done

    - name: Create or update XML files
      run: |
        # Create Godot.xml
        echo "<entry>" > Godot.xml
        echo "  <name>Godot</name>" >> Godot.xml
        echo "  <version>${{ env.stable_version }}</version>" >> Godot.xml
        echo "  <url>https://github.com/scillidan/share_godot-docs/releases/download/${{ steps.upstream_run.outputs.run_date }}/Godot-docset-${{ env.stable_version }}.tgz</url>" >> Godot.xml
        echo "  <other-versions>" >> Godot.xml
        echo "    <version>" >> Godot.xml
        echo "      <name>3.6</name>" >> Godot.xml
        echo "    </version>" >> Godot.xml
        echo "  </other-versions>" >> Godot.xml
        echo "</entry>" >> Godot.xml

        # Create Godot3.xml
        echo "<entry>" > Godot3.xml
        echo "  <name>Godot</name>" >> Godot3.xml
        echo "  <version>3.6</version>" >> Godot3.xml
        echo "  <url>https://github.com/scillidan/share_godot-docs/releases/download/${{ steps.upstream_run.outputs.run_date }}/Godot-docset-3.6.tgz</url>" >> Godot3.xml
        echo "</entry>" >> Godot3.xml

    - name: Upload XML files
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add Godot.xml Godot3.xml
        git commit -m "Update Godot.xml and Godot3.xml files for release ${{ steps.upstream_run.outputs.run_date }}"
        git push

    - name: Create or update release and upload .tgz assets with body
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Godot-docset-master.tgz
          Godot-docset-${{ env.stable_version }}.tgz
          Godot-docset-3.6.tgz
        tag_name: ${{ steps.upstream_run.outputs.run_date }}
        name: Release ${{ steps.upstream_run.outputs.run_date }}
        body: |
          [${{ env.upstream_owner }}/${{ env.upstream_repo }}@${{ steps.upstream_run.outputs.run_id }}](${{ steps.upstream_run.outputs.run_html_url }})
        draft: false
        prerelease: false

    - name: Add release description with link to upstream run
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        tag=${{ steps.upstream_run.outputs.run_date }}
        body="[${{ env.upstream_owner }}/${{ env.upstream_repo }}@${{ steps.upstream_run.outputs.run_id }}](${{ steps.upstream_run.outputs.run_html_url }})"
        echo "Updating release $tag body with upstream run link"
        repo_owner=scillidan
        repo_name=share_godot-docs
        
        release_id=$(curl -s \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/$repo_owner/$repo_name/releases/tags/$tag" \
          | jq -r '.id')
    
        if [ "$release_id" = "null" ] || [ -z "$release_id" ]; then
          echo "Release not found for tag $tag"
          exit 1
        fi
    
        curl -s -X PATCH \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/$repo_owner/$repo_name/releases/$release_id" \
          -d "{\"body\":\"$body\"}"
    
        echo "Release description updated"
